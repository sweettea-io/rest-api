#!/bin/bash

# --- Run supported application as either a Go binary or Docker image (and potentially as a daemon if Docker image) --- #

# ======== PARSE ARGS ======== #

THIS_DIR="$( cd "$( dirname "${BASH_SOURCE[0]}" )" && pwd )"
GO_BUILD_OUTPUT_DIR="./bin"
APPS_DIR="./cmd"
ENVS_DIR="./envs"
RUN_ENV="local"
APP="$1"
RUN_TYPE="$2"
RUN_AS_DAEMON="$3"

# ======== VALIDATE ARGS ======== #

$THIS_DIR/validate_arg "$APP" "server|migrate|worker" "target"
$THIS_DIR/validate_arg "$RUN_TYPE" "image|binary|file" "run format"

# ======== RUN LOCAL APP ======== #

if [[ "$RUN_TYPE" = "image" ]]; then
	# Get the Docker image name for the 'local' env tier.
	image_name=$( $THIS_DIR/env_reader "$APP" "$RUN_ENV" "IMAGE_NAME" )

	# Construct the docker command to execute.
	CMD="docker run"

	# Add port binding for the server app.
	if [[ "$APP" = "server" ]]; then
		server_port=$( $THIS_DIR/env_reader "$APP" "$RUN_ENV" "SERVER_PORT" )
		CMD="$CMD -p $server_port:$server_port"
	fi

	# Run Docker image as daemon if desired.
	if [[ "$RUN_AS_DAEMON" = "true" ]]; then
		CMD="$CMD -d"
	fi

	# Use proper environment variables based on which app to run.
	CMD="$CMD --env-file $ENVS_DIR/$RUN_ENV/$APP.env"

	# Specify which image to run.
	CMD="$CMD $image_name"

	# Run the docker image.
	$CMD
elif [[ "$RUN_TYPE" = "binary" ]]; then
	# Run the Go binary for this app.
	$GO_BUILD_OUTPUT_DIR/$APP
else
	# Run the Go file for this app.
	go run "$APPS_DIR/$APP/main.go"
fi