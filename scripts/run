#!/bin/bash

# --- Run supported application as either a Go binary or Docker image (and potentially as a daemon if Docker image) --- #

set -e # exit if any child script exits with non-zero status

# ======== PARSE ARGS ======== #

this_dir="$( cd "$( dirname "${BASH_SOURCE[0]}" )" && pwd )"
app="$1"
run_type="$2"
run_as_daemon="$3"
uppercase_app=$( echo "$app" | tr "[:lower:]" "[:upper:]" )
go_build_output_dir="./bin"
apps_dir="./cmd"
envs_dir="./envs"
run_env="local"

# ======== VALIDATE ARGS ======== #

$this_dir/validate_arg "target" "$app" "server|migrate|worker"
$this_dir/validate_arg "format" "$run_type" "image|binary|file"

# ======== RUN LOCAL APP ======== #

# Run app as a Docker image.
if [[ "$run_type" = "image" ]]; then
	# Construct Docker image name to run.
	image_owner=$( $this_dir/env_reader "$run_env" "IMAGE_OWNER" )
	image_name=$( $this_dir/env_reader "$run_env" "${uppercase_app}_IMAGE_NAME" )
	image_repo="$image_owner/$image_name"
	image_version="$( docker images $image_repo | sed -n 2p | awk '{print $2}' )"

	if [[ ! "$image_version" ]]; then
		echo "Couldn't find tag for Docker repository \"$image_repo\"...Exiting."
		exit 1
	fi

	if [[ "$image_version" == "<none>" ]]; then
		echo "Tag for latest Docker repository \"$image_repo\" can't be \"<none>\"...Exiting."
		exit 1
	fi

	# Build the 'docker run' command.
	cmd="docker run --env-file=\"$envs_dir/$run_env.env\""

	# Add port binding for 'server' app.
	if [[ "$app" = "server" ]]; then
		server_port=$( $this_dir/env_reader "$run_env" "SERVER_PORT" )
		cmd+=" -p $server_port:$server_port"
	fi

	# Run as daemon if desired.
	if [[ "$run_as_daemon" = "true" ]]; then
		cmd+=" -d"
	fi

	# Specify image to run.
	cmd+=" $image_repo:$image_version"

	# Run Docker image.
	eval $cmd

elif [[ "$run_type" = "binary" ]]; then
	# Run app as Go binary.
	$go_build_output_dir/$app
else
	# Run app as Go file.
	go run "$apps_dir/$app/main.go"
fi