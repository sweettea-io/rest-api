#!/bin/bash

# --- Run supported application as either a Go binary or Docker image (and potentially as a daemon if Docker image) --- #

# ======== PARSE ARGS ======== #

this_dir="$( cd "$( dirname "${BASH_SOURCE[0]}" )" && pwd )"
go_build_output_dir="./bin"
apps_dir="./cmd"
envs_dir="./envs"
run_env="local"
app="$1"
run_type="$2"
run_as_daemon="$3"

# ======== VALIDATE ARGS ======== #

$this_dir/validate_arg "target" "$app" "server|migrate|worker"
$this_dir/validate_arg "format" "$run_type" "image|binary|file"

# ======== RUN LOCAL APP ======== #

if [[ "$run_type" = "image" ]]; then
	# Get the Docker image name for the 'local' env tier.
	image_name=$( $this_dir/env_reader "$app" "$run_env" "IMAGE_NAME" )

	# Build up args for 'docker run' command.
	cmd_args="--env-file $envs_dir/$run_env/$app.env"

	# Add port binding for the server app.
	if [[ "$app" = "server" ]]; then
		server_port=$( $this_dir/env_reader "$app" "$run_env" "SERVER_PORT" )
		cmd_args="$cmd_args -p $server_port:$server_port"
	fi

	# Run as daemon if desired.
	if [[ "$run_as_daemon" = "true" ]]; then
		cmd_args="$cmd_args -d"
	fi

	# Run the Docker image.
	docker run "$image_name" "$cmd_args"
elif [[ "$run_type" = "binary" ]]; then
	# Run the Go binary for this app.
	$go_build_output_dir/$app
else
	# Run the Go file for this app.
	go run "$apps_dir/$app/main.go"
fi