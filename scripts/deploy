#!/bin/bash

# --- Deploy Supported Application to Core Kubernetes Cluster of Specified Env Tier --- #

set -e # exit if any child script exits with non-zero status

# ======== PARSE ARGS ======== #

this_dir="$( cd "$( dirname "${BASH_SOURCE[0]}" )" && pwd )"
app="$1"
deploy_env="$2"
uppercase_app=$( echo "$app" | tr "[:lower:]" "[:upper:]" )

# ======== VALIDATE ARGS ======== #

$this_dir/validate_arg "target" "$app" "server|migrate|worker"
$this_dir/validate_arg "env" "$deploy_env" "local|dev|staging|prod"

# ======== GET ENVS ======== #

image_owner=$( $this_dir/env_reader "$deploy_env" "IMAGE_OWNER" )
image_name=$( $this_dir/env_reader "$deploy_env" "${uppercase_app}_IMAGE_NAME" )
cluster_name=$( $this_dir/env_reader "$deploy_env" "CORE_CLUSTER_NAME" )
domain=$( $this_dir/env_reader "$deploy_env" "DOMAIN" )

# ======== VALIDATE ENVS ======== #

$this_dir/assert_env "IMAGE_OWNER" "$image_owner"
$this_dir/assert_env "${uppercase_app}_IMAGE_NAME" "$image_name"
$this_dir/assert_env "CORE_CLUSTER_NAME" "$cluster_name"

if [[ "$deploy_env" != "local" ]]; then
	$this_dir/assert_env "DOMAIN" "$domain"

	#  For non-local envs, the actual cluster/context name includes the domain.
	cluster_name="$cluster_name.$domain"
fi

# ======== PUSH IMAGE TO REPOSITORY ======== #

image_repo="$image_owner/$image_name"
image_version="$( docker images $image_repo | sed -n 2p | awk '{print $2}' )"

if [[ ! "$image_version" ]]; then
	echo "Couldn't find tag for Docker repository \"$image_repo\"...Exiting."
	exit 1
fi

if [[ "$image_version" == "<none>" ]]; then
	echo "Tag for latest Docker repository \"$image_repo\" can't be \"<none>\"...Exiting."
	exit 1
fi

# Push Docker image to external repository.
docker push "$image_repo:$image_version"

# ======== SPECIFY/VALIDATE CLUSTER ======== #

# Switch to cluster context.
kubectl config use-context "$cluster_name" 1>/dev/null

if ! kubectl get nodes &>/dev/null; then
	echo "Error fetching cluster nodes. Not deploying."
	exit 1
fi

# ======== DETERMINE DEPLOYMENT EXISTENCE ======== #

resource_name="$image_name"	# unique suffix will be added for job deploys

# Always make a new deploy for deploys that are actually 'jobs' (i.e. migrate jobs)
if [[ "$app" = "migrate" ]]; then
	new_deploy="true"

	# For a job, the resource name needs to differ with each deploy, so generate a uuid for suffix.
	uuid=$( uuidgen | tr "[:upper:]" "[:lower:]" )
	job_uuid="${uuid:0:8}"
	resource_name="$image_name-$job_uuid"

# Otherwise, for deployments, check if the deployment already exists.
elif ! kubectl get deployment "$resource_name" 2>/dev/null; then
	new_deploy="true"
fi

# ======== FORMAT DEPLOY ARGS ======== #

port=$( $this_dir/env_reader "$deploy_env" "SERVER_PORT" "port" )
replicas=$( $this_dir/env_reader "$deploy_env" "${uppercase_app}_REPLICAS" "replicas" )
restart=$( $this_dir/env_reader "$deploy_env" "${uppercase_app}_RESTART_POLICY" "restart" )
deploy_envs=$( $this_dir/env_reader "$deploy_env" "all" "true" )

# ======== DEPLOY ======== #

if [[ "$new_deploy" == "true" ]]; then
	# Create a new k8s cluster deployment.
	cmd="kubectl run $resource_name --image=$image_repo:$image_version $port $replicas $restart $deploy_envs"
	eval $cmd

	# Expose the deployment as a K8S service if this is the first time server deployment.
	if [[ "$app" == "server" ]]; then
		echo "First time server deployment detected...preparing to publicize deployment..."
		sleep 3

		if [[ "$deploy_env" == "local" ]]; then
			$this_dir/expose_local_deployment "$resource_name"
		else
			$this_dir/publicize_deployment "$deploy_env" "$resource_name"
		fi
	fi
else
	# Update the image of an existing k8s deployment.
	kubectl set image "deployment/$resource_name" "$image_name=$image_repo:$image_version"
fi

echo "Done!"