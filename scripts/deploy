#!/bin/bash

# --- Deploy supported application to Kubernetes cluster of specified env tier --- #

# ======== PARSE ARGS ======== #

THIS_DIR="$( cd "$( dirname "${BASH_SOURCE[0]}" )" && pwd )"
APP="$1"
DEPLOY_ENV="$2"

# ======== VALIDATE ARGS ======== #

$THIS_DIR/validate_arg "$APP" "server|migrate|worker" "target"
$THIS_DIR/validate_arg "$DEPLOY_ENV" "local|dev|staging|prod" "env"

# ======== TAG/PUSH IMAGE TO REPOSITORY ======== #

image_owner=$( $THIS_DIR/env_reader "$APP" "$DEPLOY_ENV" "IMAGE_OWNER" )
image_name=$( $THIS_DIR/env_reader "$APP" "$DEPLOY_ENV" "IMAGE_NAME" )
image_repo="$image_owner/$image_name"
image_version=$( $THIS_DIR/latest_sha )

# Tag Docker image with version of latest commit sha.
docker tag "$image_name" "$image_repo:$image_version"

# Push Docker image to external repository.
docker push "$image_repo:$image_version"

# ======== SPECIFY/VALIDATE CLUSTER ======== #

# Get cluster name from envs.
cluster_name=$( $THIS_DIR/env_reader "$APP" "$DEPLOY_ENV" "CLUSTER_NAME" )

# Switch to cluster context.
kubectl config use-context "$cluster_name"

if ! kubectl get nodes; then
	echo "Error fetching cluster nodes. Not deploying."
	exit
fi

# ======== DETERMINE DEPLOYMENT EXISTENCE ======== #

resource_name="$image_name"	# unique suffix will be added for job deploys

# Always make a new deploy for deploys that are actually 'jobs' (i.e. migrate jobs)
if [[ "$APP" = "migrate" ]]; then
	NEW_DEPLOY="true"

	# For a job, the resource name needs to differ with each deploy, so generate a uuid for suffix.
	uuid=$( uuidgen )
	job_uid="${uuid:0:8}"
	image_name="$image_name-$job_uid"
else
	# TODO: For 'deployments', check to see if they already exist first.
	# This will determine whether we should 'kubectl run' or simply 'kubectl set image'.
	echo "TODO"
fi

# ======== FORMAT DEPLOY ARGS ======== #

port=$( $THIS_DIR/env_reader "$APP" "$DEPLOY_ENV" "SERVER_PORT" "port" )
replicas=$( $THIS_DIR/env_reader "$APP" "$DEPLOY_ENV" "REPLICAS_COUNT" "replicas" )
restart=$( $THIS_DIR/env_reader "$APP" "$DEPLOY_ENV" "RESTART_POLICY" "restart" )
deploy_envs=$( $THIS_DIR/env_reader "$APP" "$DEPLOY_ENV" "all" "true" )

# ======== DEPLOY ======== #

if [[ "$NEW_DEPLOY" ]]; then
	kubectl run "$resource_name" "--image=$image_repo" "$port" "$replicas" "$restart" "$deploy_envs"
else
	kubectl set image "deployment/$resource_name" "$image_name=$image_repo:$image_version"
fi

echo "Done!"