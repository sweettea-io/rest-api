#!/bin/bash

# --- Deploy supported application to Kubernetes cluster of specified env tier --- #

THIS_DIR="$( cd "$( dirname "${BASH_SOURCE[0]}" )" && pwd )"
APP="$1"
DEPLOY_ENV="$2"
ENVS_DIR="./envs"
APP_VAL_SUPPORTED="" # false
DEPLOY_ENV_VAL_SUPPORTED="" # false
declare -a SUPPORTED_APPS=("server" "migrate" "worker")
declare -a SUPPORTED_DEPLOY_ENVS=("local" "dev" "staging", "prod")

# ======== VALIDATE ARGS ======== #

# Ensure provided app arg is supported.
for supported_app_val in "${SUPPORTED_APPS[@]}"; do
	# Set APP_VAL_SUPPORTED to "true" if app arg is one of the supported values.
	if [[ "$APP" = "$supported_app_val" ]]; then
		APP_VAL_SUPPORTED="true"
	fi
done

# Exit early if app value not supported.
if [[ ! "$APP_VAL_SUPPORTED" ]]; then
	echo "App value \"$APP\" not supported. Not deploying."
	exit
fi

# Ensure provided deploy_env arg is supported.
for supported_deploy_env in "${SUPPORTED_DEPLOY_ENVS[@]}"; do
	# Set DEPLOY_ENV_VAL_SUPPORTED to "true" if deploy_env arg is one of the supported values.
	if [[ "$DEPLOY_ENV" = "$supported_deploy_env" ]]; then
		DEPLOY_ENV_VAL_SUPPORTED="true"
	fi
done

# Exit early if deploy_env value not supported.
if [[ ! "$DEPLOY_ENV_VAL_SUPPORTED" ]]; then
	echo "Deploy environment \"$DEPLOY_ENV\" not supported. Not deploying."
	exit
fi

# ======== VALIDATE CLUSTER ======== #

cluster_name=$( $THIS_DIR/env_reader "$APP" "$DEPLOY_ENV" "CLUSTER_NAME" )

# Get image name from script
IMAGE_NAME=$( $THIS_DIR/docker_images "$APP" )

# Get app-agnostic env vars from proper file
docker_image_owner=$( $THIS_DIR/env_reader "$APP" "$DEPLOY_ENV" "DOCKER_IMAGE_OWNER" )

# TODO: Group logic by kubectl run vs. kubectl update

# ======== FORMAT DEPLOY ARGS ======== #

port=$( $THIS_DIR/env_reader "$APP" "$DEPLOY_ENV" "PORT" "port" )
replicas=$( $THIS_DIR/env_reader "$APP" "$DEPLOY_ENV" "REPLICAS_COUNT" "replicas" )
restart=$( $THIS_DIR/env_reader "$APP" "$DEPLOY_ENV" "RESTART_POLICY" "restart" )
deploy_envs=$( $THIS_DIR/env_reader "$APP" "$DEPLOY_ENV" "all" "true" )

# ======== DEPLOY ======== #

kubectl run "$IMAGE_NAME" --image="$docker_image_owner/$IMAGE_NAME" $port $replicas $restart $deploy_envs