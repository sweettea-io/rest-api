#!/bin/bash

# --- Deploy supported application to Kubernetes cluster of specified env tier --- #

THIS_DIR="$( cd "$( dirname "${BASH_SOURCE[0]}" )" && pwd )"
APP="$1"
DEPLOY_ENV="$2"
ENVS_DIR="./envs"
APP_VAL_SUPPORTED="" # false
DEPLOY_ENV_VAL_SUPPORTED="" # false
declare -a SUPPORTED_APPS=("server" "migrate" "worker")
declare -a SUPPORTED_DEPLOY_ENVS=("local" "dev" "staging", "prod")

# Ensure provided app arg is supported.
for supported_app_val in "${SUPPORTED_APPS[@]}"; do
	# Set APP_VAL_SUPPORTED to "true" if app arg is one of the supported values.
	if [[ "$APP" = "$supported_app_val" ]]; then
		APP_VAL_SUPPORTED="true"
	fi
done

# Exit early if app value not supported.
if [[ ! "$APP_VAL_SUPPORTED" ]]; then
	echo "App value \"$APP\" not supported. Not deploying."
	exit
fi

# Ensure provided deploy_env arg is supported.
for supported_deploy_env in "${SUPPORTED_DEPLOY_ENVS[@]}"; do
	# Set DEPLOY_ENV_VAL_SUPPORTED to "true" if deploy_env arg is one of the supported values.
	if [[ "$DEPLOY_ENV" = "$supported_deploy_env" ]]; then
		DEPLOY_ENV_VAL_SUPPORTED="true"
	fi
done

# Exit early if deploy_env value not supported.
if [[ ! "$DEPLOY_ENV_VAL_SUPPORTED" ]]; then
	echo "Deploy environment \"$DEPLOY_ENV\" not supported. Not deploying."
	exit
fi

# Get image name from script
IMAGE_NAME=$( $THIS_DIR/docker_images "$APP" )

# Get app-agnostic env vars from proper file
docker_image_owner=$( $THIS_DIR/env_reader "$APP" "$DEPLOY_ENV" "DOCKER_IMAGE_OWNER" )

# TODO: Group logic by kubectl run vs. kubectl update



# Deployment (server, worker)
if [ "$APP" -eq "server" ] || [ "$APP" -eq "worker" ]; then
	server_port=$( $THIS_DIR/env_reader "$APP" "$DEPLOY_ENV" "PORT" )

	if [[ "$server_port" ]]; then
		server_port="--port=$server_port"
	fi

	server_replicas_count=$( $THIS_DIR/env_reader "$APP" "$DEPLOY_ENV" "SERVER_REPLICAS_COUNT" )
	server_restart_policy=$( $THIS_DIR/env_reader "$APP" "$DEPLOY_ENV" "SERVER_RESTART_POLICY" )

	# Get all envs for this deployment in kubectl-arg format
	deploy_envs=$( $THIS_DIR/env_reader "$APP" "$DEPLOY_ENV" "all" "true" )

	kubectl run "$IMAGE_NAME" \
		--image="$docker_image_owner/$IMAGE_NAME" $server_port \
		--replicas="$server_replicas_count" \
		--restart="$server_restart_policy" \
		$deploy_envs

# Job (migrate)
else
	echo ""
fi