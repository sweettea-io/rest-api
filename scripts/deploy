#!/bin/bash

# --- Deploy supported application to Kubernetes cluster of specified env tier --- #

THIS_DIR="$( cd "$( dirname "${BASH_SOURCE[0]}" )" && pwd )"
APP="$1"
DEPLOY_ENV="$2"
APP_VAL_SUPPORTED="" # false
DEPLOY_ENV_VAL_SUPPORTED="" # false
declare -a SUPPORTED_APPS=("server" "migrate" "worker")
declare -a SUPPORTED_DEPLOY_ENVS=("local" "dev" "staging", "prod")

# ======== VALIDATE ARGS ======== #

# Ensure provided app arg is supported.
for supported_app_val in "${SUPPORTED_APPS[@]}"; do
	# Set APP_VAL_SUPPORTED to "true" if app arg is one of the supported values.
	if [[ "$APP" = "$supported_app_val" ]]; then
		APP_VAL_SUPPORTED="true"
	fi
done

# Exit early if app value not supported.
if [[ ! "$APP_VAL_SUPPORTED" ]]; then
	echo "App value \"$APP\" not supported. Not deploying."
	exit
fi

# Ensure provided deploy_env arg is supported.
for supported_deploy_env in "${SUPPORTED_DEPLOY_ENVS[@]}"; do
	# Set DEPLOY_ENV_VAL_SUPPORTED to "true" if deploy_env arg is one of the supported values.
	if [[ "$DEPLOY_ENV" = "$supported_deploy_env" ]]; then
		DEPLOY_ENV_VAL_SUPPORTED="true"
	fi
done

# Exit early if deploy_env value not supported.
if [[ ! "$DEPLOY_ENV_VAL_SUPPORTED" ]]; then
	echo "Deploy environment \"$DEPLOY_ENV\" not supported. Not deploying."
	exit
fi

# ======== TAG/PUSH IMAGE TO REPOSITORY ======== #

image_name=$( $THIS_DIR/docker_images "$APP" )
image_owner=$( $THIS_DIR/env_reader "$APP" "$DEPLOY_ENV" "IMAGE_OWNER" )
image_repo="$image_owner/$image_name"
image_version=$( git log -n 1 | grep "commit " )

# Tag docker image with version of latest commit sha
docker tag "$image_name" "$image_repo:$image_version"

# Push docker image to external repository
docker push "$image_repo:$image_version"

# ======== SPECIFY/VALIDATE CLUSTER ======== #

# Get cluster name from envs.
cluster_name=$( $THIS_DIR/env_reader "$APP" "$DEPLOY_ENV" "CLUSTER_NAME" )

# Switch to cluster context.
kubectl config use "$cluster_name"

if ! kubectl get nodes; then
	echo "Error fetching cluster nodes. Not deploying."
	exit
fi

# ======== DETERMINE DEPLOYMENT EXISTENCE ======== #

resource_name="$image_name"	# unique suffix will be added for job deploys

# Always make a new deploy for deploys that are actually 'jobs'
if [[ "$APP" = "migrate" ]]; then
	NEW_DEPLOY="true"

	# For a job, the resource name needs to differ with each deploy, so generate a uid for suffix.
	job_uid="TODO"
	image_name="$image_name-$job_uid"
else
	# For 'deployments', check to see if they already exist first.
	# This will determine whether we should 'kubectl run' or simply 'kubectl update'.
	echo "TODO"
fi

# ======== FORMAT DEPLOY ARGS ======== #

port=$( $THIS_DIR/env_reader "$APP" "$DEPLOY_ENV" "PORT" "port" )
replicas=$( $THIS_DIR/env_reader "$APP" "$DEPLOY_ENV" "REPLICAS_COUNT" "replicas" )
restart=$( $THIS_DIR/env_reader "$APP" "$DEPLOY_ENV" "RESTART_POLICY" "restart" )
deploy_envs=$( $THIS_DIR/env_reader "$APP" "$DEPLOY_ENV" "all" "true" )

# ======== DEPLOY ======== #

if [[ "$NEW_DEPLOY" ]]; then
	kubectl run "$resource_name" "--image=$image_repo" "$port" "$replicas" "$restart" "$deploy_envs"
else
	container_name="$image_name"
	kubectl set image "deployment/$resource_name" "$container_name=$image_repo:latest"
fi