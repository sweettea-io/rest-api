#!/bin/bash

# --- Upsert files/dirs that were git-ignored and should now exist --- #

# ======== VAR DECLARATION ======== #

env_dir="./envs"
examples_dir="$env_dir/examples"
defaults_path="$env_dir/defaults.json"
tmp_kubeconfigs_dir="./tmp/kubeconfigs"
declare -a apps=("migrate" "server" "worker")
declare -a env_tiers=("test" "local" "dev" "staging" "prod")
declare -a dirs_to_upsert=("./bin/" "$tmp_kubeconfigs_dir" "$env_dir")

# ======== GENERIC FILE/DIR UPSERTION ======== #

# Upsert specified dirs.
for dir in "${dirs_to_upsert[@]}"; do
	# If dir doesn't exist already, create it.
	if [[ ! -d "$dir" ]]; then
		echo "Creating directory $dir"
		mkdir -p "$dir"
	fi
done

# Upsert a tmp kubeconfig file for each env
for env_tier in "${env_tiers[@]}"; do
	tmp_kubeconfig_path="$tmp_kubeconfigs_dir/$env_tier"

	if [[ ! -e "$tmp_kubeconfig_path" ]]; then
		echo "Creating empty temp kubeconfig file at $tmp_kubeconfig_path"
		touch "$tmp_kubeconfig_path"
	fi
done

# ======== ENV UPSERTION ======== #

# Get env keys from "common" section of defaults JSON env file and convert into bash array.
common_env_keys=$( cat "$defaults_path" | jq -r ".common | keys[]" )
IFS=$'\n' read -rd '' -a common_keys <<<"$common_env_keys"

# Upsert env file for each env tier.
for env_tier in "${env_tiers[@]}"; do
	env_file_path="$env_dir/$env_tier.env"

	# Skip if file already exists.
	if [[ -e "$env_file_path" ]]; then
		continue
	fi

	# Collect all env vars for this environment and write to env file.
	envs=""
	for key in "${common_keys[@]}"; do
		# Get env-specific value and common fallback value.
		env_specific_val=$( cat "$defaults_path" | jq -r ".$env_tier.$key" )
		common_env_val=$( cat "$defaults_path" | jq -r ".common.$key" )

		# Sub null values for empty strings
		if [[ "$env_specific_val" = "null" ]]; then
			env_specific_val=""
		fi

		if [[ "$common_env_val" = "null" ]]; then
			common_env_val=""
		fi

		# Prioritize the env-specific value, but use the common env value as default.
		val="${env_specific_val:-$common_env_val}"

		# Add env key/value pair to this set of envs
		envs="$envs$key=$val\n"
	done

	echo "Creating env file \"$env_file_path\"."

	# Write env vars to file.
	printf "$envs" > "$env_file_path"
done