#!/bin/bash

# --- Create AWS Route53 Hosted Zone for provided domain/subdomain --- #

# ======== PARSE ARGS ======== #

call_ref=$(uuidgen)
subdomain="$1"
domain="$2"
naked_hosted_zone_id="$3"
new_hosted_zone_name="$subdomain.$domain"

hosted_zone_exists=$( aws route53 list-hosted-zones | jq "[.HostedZones[] | .Name]" | grep "\"$new_hosted_zone_name.\"" )

# ======== CREATE HOSTED ZONE ======== #

if [[ "$hosted_zone_exists" ]]; then
	echo "Hosted zone \"$new_hosted_zone_name\" already exists. Not creating."
else
	# Create hosted zone.
	echo "Creating hosted zone \"$new_hosted_zone_name\"..."
	hosted_zone=$( aws route53 create-hosted-zone --name "$new_hosted_zone_name" --caller-reference "$call_ref")

	echo "Hosted zone created."

	# Parse name servers from response.
	hz_name_servers=$( echo "$hosted_zone" | jq ".DelegationSet.NameServers" | jq -c -r ".[]" )

	# Format name servers into a new JSON format for the next request
	IFS=$'\n' read -rd '' -a hz_ns_arr <<<"$hz_name_servers"
	ns_count="${#hz_ns_arr[@]}"

	resource_records="["
	i="1"
	for ns in "${hz_ns_arr[@]}"; do
		resource_records="${resource_records}{\"Value\":\"$ns\"}"

		if [[ "$i" -lt "$ns_count" ]]; then
			resource_records+=","
		fi

		i=$((i+1))
	done
	resource_records+="]"

	# ======== REGISTER NS DNS RECORDS ======== #

	# Create payload for NS record changes.
	changes="{
		\"Comment\": \"Upserting NS Records\",
		\"Changes\": [{
			\"Action\": \"UPSERT\",
			\"ResourceRecordSet\": {
			  \"Name\": \"$new_hosted_zone_name\",
			  \"Type\": \"NS\",
			  \"TTL\": 60,
			  \"ResourceRecords\": $resource_records
			}
		}]
	}"

	# Register name servers as NS records.
	echo "Registering hosted zone name servers as NS records for domain \"$domain\"..."
	aws route53 change-resource-record-sets --hosted-zone-id "$naked_hosted_zone_id" --change-batch "$changes"
fi