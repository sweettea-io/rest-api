#!/bin/bash

# --- Ingest args and prep them for provider-specific cluster-creation script --- #

# ======== PARSE ARGS ======== #

this_dir="$( cd "$( dirname "${BASH_SOURCE[0]}" )" && pwd )"
provider="$1"
role="$2"
env="$3"
uppercase_role=$( echo "$role" | tr "[:lower:]" "[:upper:]" )

# ======== VALIDATE ARGS ======== #

$this_dir/validate_arg "role" "$role" "core|build|train"
$this_dir/validate_arg "env" "$env" "local|dev|staging|prod"

# ======== GET ENVS ======== #

cluster_name=$( $this_dir/env_reader "$env" "${uppercase_role}_CLUSTER_NAME" )
domain=$( $this_dir/env_reader "$env" "DOMAIN" )
hosted_zone_id=$( $this_dir/env_reader "$env" "HOSTED_ZONE_ID" )
zones=$( $this_dir/env_reader "$env" "${uppercase_role}_CLUSTER_ZONES" )
master_size=$( $this_dir/env_reader "$env" "MASTER_SIZE" )
node_size=$( $this_dir/env_reader "$env" "NODE_SIZE" )
node_count=$( $this_dir/env_reader "$env" "NODE_COUNT" )
state=$( $this_dir/env_reader "$env" "${uppercase_role}_CLUSTER_STATE" )
image=$( $this_dir/env_reader "$env" "CLUSTER_IMAGE" )
k8s_version=$( $this_dir/env_reader "$env" "K8S_VERSION" )

# Use fallbacks for these env vals.
zones="${zones:-us-west-1a}"
master_size="${master_size:-t2.micro}"
node_size="${node_size:-t2.micro}"
node_count="${node_count:-2}"
image="${image:-099720109477/ubuntu/images/hvm-ssd/ubuntu-xenial-16.04-amd64-server-20171026.1}"
k8s_version="${k8s_version:-1.7.10}"

# ======== MORE VALIDATIONS ======== #

$this_dir/assert_env "${uppercase_role}_CLUSTER_NAME" "$cluster_name"

# Ensure cluster name is available.
if kubectl config get-clusters | grep "^${cluster_name}$" &>/dev/null; then
	echo "Cluster \"$cluster_name\" already exists. Exiting."
	exit
fi

if [[ "$env" != "local" ]]; then
	$this_dir/validate_arg "provider" "$provider" "aws"
	$this_dir/assert_env "DOMAIN" "$domain"
	$this_dir/assert_env "HOSTED_ZONE_ID" "$hosted_zone_id"
fi

# ======== UPSERT CLUSTER ======== #

if [[ "$env" == "local" ]]; then
	# Upsert local cluster.
	$this_dir/upsert_local_cluster "$role" "$cluster_name" "$k8s_version"
else
	# Upsert cloud-based cluster.
	$this_dir/$provider/upsert_cluster \
		"$cluster_name" \
		"$domain" \
		"$hosted_zone_id" \
		"$state" \
		"$zones" \
		"$master_size" \
		"$node_size" \
		"$node_count" \
		"$image" \
		"$k8s_version"
fi

# ======== UPSERT DB ======== #

if [ "$role" == "core" ] && [ "$env" != "local" ]; then
	# Upsert core db if just created core cluster.
	$this_dir/$provider/upsert_db "$cluster_name" "$cluster_name.$domain"
fi

echo "Done!"