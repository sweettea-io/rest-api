#!/bin/bash

# --- Ingest args and prep them for provider-specific API cluster-creation script --- #

# ======== PARSE ARGS ======== #

this_dir="$( cd "$( dirname "${BASH_SOURCE[0]}" )" && pwd )"
provider="$1"
name="$2"
env="$3"

# ======== VALIDATE ARGS ======== #

$this_dir/validate_arg "provider" "$provider" "aws"
$this_dir/validate_arg "env" "$env" "local|dev|staging|prod"

if [[ ! "$name" ]]; then
	echo "\"name\" argument cannot be empty. Exiting."
	exit
fi

# ======== GET ENV VALS ======== #

# TODO: Handle vast difference in logic when $env == 'local'.

# Required to have env values already.
domain=$( $this_dir/env_reader "$env" "DOMAIN" )
hosted_zone_id=$( $this_dir/env_reader "$env" "HOSTED_ZONE_ID" )
rest_api_token=$( $this_dir/env_reader "$env" "REST_API_TOKEN" )
api_version=$( $this_dir/env_reader "$env" "API_VERSION" )

if [[ ! "$domain" ]]; then
	echo "DOMAIN env var must have a value already set. Exiting."
	exit
fi

if [[ ! "$hosted_zone_id" ]]; then
	echo "HOSTED_ZONE_ID env var must have a value already set. Exiting."
	exit
fi

if [[ ! "$rest_api_token" ]]; then
	echo "REST_API_TOKEN env var must have a value already set. Exiting."
	exit
fi

if [[ ! "$api_version" ]]; then
	echo "API_VERSION env var must have a value already set. Exiting."
	exit
fi

# Envs that can (but don't have to) be set yet.
zones=$( $this_dir/env_reader "$env" "API_CLUSTER_ZONES" )
master_size=$( $this_dir/env_reader "$env" "MASTER_SIZE" )
node_size=$( $this_dir/env_reader "$env" "NODE_SIZE" )
node_count=$( $this_dir/env_reader "$env" "NODE_COUNT" )
image=$( $this_dir/env_reader "$env" "CLUSTER_IMAGE" )
k8s_version=$( $this_dir/env_reader "$env" "K8S_VERSION" )

# ======== USE FALLBACK DEFAULTS (if necessary) ======== #

zones="${zones:-us-west-1a}"
master_size="${master_size:-t2.micro}"
node_size="${node_size:-t2.micro}"
node_count="${node_count:-2}"
image="${image:-099720109477/ubuntu/images/hvm-ssd/ubuntu-xenial-16.04-amd64-server-20171026.1}"
k8s_version="${k8s_version:-1.7.10}"

# ======== CREATE STATE ======== #

# TODO: This is very aws specific -- ideally write this in a more provider-agnostic way.

# Create name for S3 bucket, combining cluster name with a uuid.
uuid=$( uuidgen | tr "[:upper:]" "[:lower:]" )
uuid="${uuid:0:8}"
bucket_name="$name-$uuid"

# Create the bucket.
$this_dir/$provider/create_bucket "$bucket_name"

# Give state a value using new bucket name.
state="s3://$bucket_name"

echo "Created S3 bucket, $bucket_name."

# ======== UPSERT CLUSTER ======== #

$this_dir/$provider/upsert_cluster \
	"$name" \
	"$domain" \
	"$hosted_zone_id" \
	"$state" \
	"$zones" \
	"$master_size" \
	"$node_size" \
	"$node_count" \
	"$image" \
	"$k8s_version"

# ======== REGISTER NEW API CLUSTER WITH CORE CLUSTER FOR THIS ENV ======== #

payload="{\"name\":\"$name\",\"bucket_name\":\"$bucket_name\"}"

curl -d "$payload" \
	-H "Content-Type: application/json" \
	-H "Sweet-Tea-Api-Token: $rest_api_token" \
	-X POST \
	"https://api.$domain/$api_version/clusters"

# ======== RE-BUILD & DEPLOY TO CORE CLUSTER FOR THIS ENV ======== #

# Rebuild and deploy any apps that rely on KUBECONFIG access for cluster deploys.
declare -a apps_to_update=("server" "worker")

for app in "${apps_to_update[@]}"; do
	echo "Building the \"$app\" app as a Docker image for the \"$env\" environment..."
	make build target="$app" env="$env"

	echo "Building the latest \"$app\" app to the \"$env\" environment..."
	make deploy target="$app" env="$env"
done

echo "Done!"