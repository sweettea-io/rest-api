#!/bin/bash

# --- Create a new API cluster for a specific enviornment with the provided name --- #

set -e # exit if any child script exits with non-zero status

# ======== PARSE ARGS ======== #

this_dir="$( cd "$( dirname "${BASH_SOURCE[0]}" )" && pwd )"
cloud="$1"
name="$2"
env="$3"

# ======== VALIDATE ARGS ======== #

$this_dir/validate_arg "cloud" "$cloud" "aws"
$this_dir/validate_arg "name" "$name"
$this_dir/validate_arg "env" "$env" "local|dev|staging|prod"

# ======== GET ENV VALS ======== #

domain=$( $this_dir/env_reader "$env" "DOMAIN" )
hosted_zone_id=$( $this_dir/env_reader "$env" "HOSTED_ZONE_ID" )
rest_api_token=$( $this_dir/env_reader "$env" "REST_API_TOKEN" )
api_version=$( $this_dir/env_reader "$env" "API_VERSION" )

# ======== VALIDATE ENVS ======== #

$this_dir/assert_env "DOMAIN" "$domain"
$this_dir/assert_env "REST_API_TOKEN" "$rest_api_token"
$this_dir/assert_env "API_VERSION" "$api_version"

# Envs that can (but don't have to) be set yet.
zones=$( $this_dir/env_reader "$env" "API_CLUSTER_ZONES" )
master_size=$( $this_dir/env_reader "$env" "MASTER_SIZE" )
node_size=$( $this_dir/env_reader "$env" "NODE_SIZE" )
node_count=$( $this_dir/env_reader "$env" "NODE_COUNT" )
image=$( $this_dir/env_reader "$env" "CLUSTER_IMAGE" )
k8s_version=$( $this_dir/env_reader "$env" "K8S_VERSION" )

# ======== USE FALLBACK DEFAULTS (if necessary) ======== #

zones="${zones:-us-west-1a}"
master_size="${master_size:-t2.micro}"
node_size="${node_size:-t2.micro}"
node_count="${node_count:-2}"
image="${image:-099720109477/ubuntu/images/hvm-ssd/ubuntu-xenial-16.04-amd64-server-20171026.1}"
k8s_version="${k8s_version:-1.7.10}"

# ======== UPSERT CLUSTER ======== #

state=""

if [[ "$env" == "local" ]]; then
	# Check with the executor that their local Core cluster is running.
	$this_dir/ensure_local_core_api_running

	# Upsert local cluster.
	$this_dir/upsert_local_cluster "api" "$name" "$k8s_version"
else
	# Ensure hosted zone id exists.
	$this_dir/assert_env "HOSTED_ZONE_ID" "$hosted_zone_id"

	# Create S3 bucket as state if using AWS.
	if [[ "$cloud" == "aws" ]]; then
		# Create name for S3 bucket, combining cluster name with a uuid.
		uuid=$( uuidgen | tr "[:upper:]" "[:lower:]" )
		uuid="${uuid:0:8}"
		bucket_name="$name-$uuid"

		# Create the bucket.
		$this_dir/$cloud/create_bucket "$bucket_name"

		# Give state a value using new bucket name.
		state="s3://$bucket_name"
	fi

	# Upsert cloud-based cluster.
	$this_dir/$cloud/upsert_cluster \
		"$name" \
		"$domain" \
		"$hosted_zone_id" \
		"$state" \
		"$zones" \
		"$master_size" \
		"$node_size" \
		"$node_count" \
		"$image" \
		"$k8s_version"
fi

# ======== PROMPT EXECUTOR FOR CREDENTIALS ======== #

executor_email=""
executor_password=""

printf "Enter your credentials for the $env Sweet Tea environment.\n"

until [[ "$executor_email" ]]; do
	read -p 'Email: ' executor_email
done

until [[ "$executor_password" ]]; do
	read -sp 'Password: ' executor_password
done

# ======== REGISTER NEW API CLUSTER WITH CORE CLUSTER FOR THIS ENV ======== #

payload="{
	\"executorEmail\": \"$executor_email\",
	\"executorPassword\": \"$executor_password\",
	\"name\": \"$name\",
	\"cloud\": \"$cloud\",
	\"state\": \"$state\"
}"

printf "\Registering API cluster...\n"

$this_dir/core_api_call "$env" "POST" "/api_cluster" "$payload"

# ======== RE-BUILD & DEPLOY TO CORE CLUSTER FOR THIS ENV ======== #

# Rebuild and deploy any apps that rely on KUBECONFIG access for cluster deploys.
declare -a apps_to_update=("server" "worker")

for app in "${apps_to_update[@]}"; do
	echo "Building the \"$app\" app as a Docker image for the \"$env\" environment..."
	make build target="$app" env="$env"

	echo "Building the latest \"$app\" app to the \"$env\" environment..."
	make deploy target="$app" env="$env"
done

echo "Done!"