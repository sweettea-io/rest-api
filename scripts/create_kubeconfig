#!/bin/bash

# --- Create a fresh kubeconfig file for the specified environment --- #

set -e # exit if any child script exits with non-zero status

# ======== PARSE ARGS ======== #

this_dir="$( cd "$( dirname "${BASH_SOURCE[0]}" )" && pwd )"
env="$1"
config_filepath="tmp/kubeconfigs/$env"

# ======== VALIDATE ARGS ======== #

$this_dir/validate_arg "env" "$env" "local|dev|staging|prod"

# If local env, just copy over the current KUBECONFIG file.
# NOTE: This won't always satisfy all the clusters that exist in the database that need to
# be exported in this file...figure out the best way of managing this for future local development.
if [[ "$env" == "local" ]]; then
	if [[ ! "$KUBECONFIG" ]]; then
		echo "KUBECONFIG env var not currently set. Unsure which file to copy over into build image. Exiting."
		exit 1
	fi

	echo "Using local kubeconfig at \"$KUBECONFIG\"."
	cp "$KUBECONFIG" "$config_filepath"
else
	# ======== GET ENVS ======== #

	# Get cluster names/states from envs in order to export the main clusters.
	build_cluster_name=$( $this_dir/env_reader "$env" "BUILD_CLUSTER_NAME" )
	build_cluster_state=$( $this_dir/env_reader "$env" "BUILD_CLUSTER_STATE" )

	train_cluster_name=$( $this_dir/env_reader "$env" "TRAIN_CLUSTER_NAME" )
	train_cluster_state=$( $this_dir/env_reader "$env" "TRAIN_CLUSTER_STATE" )

	domain=$( $this_dir/env_reader "$env" "DOMAIN" )

	# ======== VALIDATE ENVS ======== #

	$this_dir/assert_env "BUILD_CLUSTER_NAME" "$build_cluster_name"
	$this_dir/assert_env "BUILD_CLUSTER_STATE" "$build_cluster_state"

	$this_dir/assert_env "TRAIN_CLUSTER_NAME" "$train_cluster_name"
	$this_dir/assert_env "TRAIN_CLUSTER_STATE" "$train_cluster_state"

	$this_dir/assert_env "DOMAIN" "$domain"

	# Update states to have the s3:// prefix
	build_cluster_state="s3://$build_cluster_state"
	train_cluster_state="s3://$train_cluster_state"

	# ======== FETCH API CLUSTERS FROM CORE API ======== #

	# Attempt to get all API clusters that need to be exported from the Core API for this specific env.
	if curl -sSf "https://api.$domain" &>/dev/null; then
		api_clusters=$( $this_dir/core_api_call "$env" "GET" "/api_cluster" )
	else
		echo "Core API not detected to be up yet. Not fetching API clusters for export."
		declare -a api_clusters=()
	fi

	# ======== EXPORT CLUSTERS ======== #

	# Export build cluster.
	$this_dir/export_cluster "$build_cluster_name" "$build_cluster_state" "$config_filepath"

	# Export train cluster.
	$this_dir/export_cluster "$train_cluster_name" "$train_cluster_state" "$config_filepath"

	# Export each API cluster.
	for cluster in $( echo "$api_clusters" | jq -c -r ".[]" ); do
		name=$( echo "$cluster" | jq -r ".name" )
		state=$( echo "$cluster" | jq -r ".state" )
		$this_dir/export_cluster "$name" "$state" "$config_filepath"
	done
fi